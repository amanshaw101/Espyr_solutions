Sort and Search Arrays

1. Write a program to accept n and store the elements into the array of size n.
Code:
#include<iostream>
using namespace std;
int main() {
    int n;
    cout << "Enter size of array: ";
    cin >> n;
    int arr[n];
    cout << "Enter " << n << " elements:\n";
    for(int i = 0; i < n; i++)
        cin >> arr[i];
    cout << "Array elements are:\n";
    for(int i = 0; i < n; i++)
        cout << arr[i] << " ";
    return 0;
}

Output:
Enter size of array: 5
Enter 5 elements:
1
2
3
4
5
Array elements are:
1 2 3 4 5

2. Reverse the given array. 
Code:
#include<iostream>
using namespace std;
int main() {
    int n;
    cout << "Enter size: ";
    cin >> n;
    int arr[n];
    cout << "Enter elements:\n";
    for(int i = 0; i < n; i++)
        cin >> arr[i];
    cout << "Reversed Array:\n";
    for(int i = n-1; i >= 0; i--)
        cout << arr[i] << " ";
    return 0;
}

Output:
Enter size: 5
Enter elements:
1
2
3
4
5
Reversed Array:
5 4 3 2 1

3. Sort the array in ascending or descending order based on input of user. 
Code:
#include<iostream>
#include<algorithm>
using namespace std;
int main() {
    int n, choice;
    cout << "Enter size: ";
    cin >> n;
    int arr[n];
    cout << "Enter elements:\n";
    for(int i = 0; i < n; i++)
        cin >> arr[i];
    cout << "Enter 1 for Ascending, 2 for Descending: ";
    cin >> choice;
    if(choice == 1)
        sort(arr, arr + n);
    else
        sort(arr, arr + n, greater<int>());
    cout << "Sorted Array:\n";
    for(int i = 0; i < n; i++)
        cout << arr[i] << " ";
    return 0;
}

Output:
Enter size: 5
Enter elements:
1
2
3
4
5
Enter 1 for Ascending, 2 for Descending: 1
Sorted Array:
1 2 3 4 5

4. Implement Binary Search on the array. 
Code:
#include<iostream>
#include<algorithm>
using namespace std;
int main() {
    int n, key;
    cout << "Enter size: ";
    cin >> n;
    int arr[n];
    cout << "Enter sorted elements:\n";
    for(int i = 0; i < n; i++)
        cin >> arr[i];

    cout << "Enter element to search: ";
    cin >> key;

    int low = 0, high = n - 1, mid, found = 0;
    while(low <= high) {
        mid = (low + high) / 2;
        if(arr[mid] == key) {
            cout << "Element found at index " << mid;
            found = 1;
            break;
        }
        else if(arr[mid] < key)
            low = mid + 1;
        else
            high = mid - 1;
    }
    if(!found)
        cout << "Element not found";
    return 0;
}

Output:
Enter size: 5
Enter sorted elements:
1
2
3
4
5
Enter element to search: 4
Element found at index 3

5. Write a program to create a 2D array and display its elements row-wise. 
Code:
#include<iostream>
using namespace std;

int main() {
    int rows, cols;
    cout << "Enter rows and columns: ";
    cin >> rows >> cols;

    int arr[rows][cols];
    cout << "Enter elements:\n";
    for(int i = 0; i < rows; i++)
        for(int j = 0; j < cols; j++)
            cin >> arr[i][j];

    cout << "2D Array Elements:\n";
    for(int i = 0; i < rows; i++) {
        for(int j = 0; j < cols; j++)
            cout << arr[i][j] << " ";
        cout << endl;
    }
    return 0;
}

Output:
Enter rows and columns: 2 2
Enter elements:
1 2 3 4
2D Array Elements:
1 2 
3 4

6. Create a program to compute the sum of all elements in a 2D array. 
Code:
#include<iostream>
using namespace std;

int main() {
    int rows, cols, sum = 0;
    cout << "Enter rows and columns: ";
    cin >> rows >> cols;

    int arr[rows][cols];
    cout << "Enter elements:\n";
    for(int i = 0; i < rows; i++)
        for(int j = 0; j < cols; j++)
            cin >> arr[i][j];

    for(int i = 0; i < rows; i++)
        for(int j = 0; j < cols; j++)
            sum += arr[i][j];

    cout << "Sum of elements: " << sum;
    return 0;
}

Output:
Enter rows and columns: 2 2
Enter elements:
1 2 3 4
Sum of elements: 10

7. Write a program to check if a given element exists in a 2D array.
Code:
#include<iostream>
using namespace std;

int main() {
    int rows, cols, key;
    cout << "Enter rows and columns: ";
    cin >> rows >> cols;

    int arr[rows][cols];
    cout << "Enter elements:\n";
    for(int i = 0; i < rows; i++)
        for(int j = 0; j < cols; j++)
            cin >> arr[i][j];

    cout << "Enter element to search: ";
    cin >> key;

    bool found = false;
    for(int i = 0; i < rows; i++) {
        for(int j = 0; j < cols; j++) {
            if(arr[i][j] == key) {
                cout << "Element found at position [" << i << "][" << j << "]";
                found = true;
                break;
            }
        }
        if(found)
            break;
    }
    if(!found)
        cout << "Element not found";
    return 0;
}

Output:
Enter rows and columns: 2 2
Enter elements:
1 2 3 4
Enter element to search: 2
Element found at position [0][1]

