1) Print multiples of 3 or 5 and sum all the multiples
#include <iostream>
using namespace std;
int main(){
    int sum=0;
    for(int i=1;i<1000;i++){
        if(i%3==0 || i%5==0){
            sum+=i;
    }}
    cout<<sum;
    return 0;
}

2) the sum of even Fibonacci numbers less than 4 million
#include <iostream>
using namespace std;
int main(){
    int previousFibNum1 = 0;
    int currentFibNum = 1;
    int fibNumSum = 0;
    while(currentFibNum <= 4000000)
    {
        fibNumSum += (currentFibNum % 2 == 0) ?
            currentFibNum : 0;
        int previousFibNum2 = previousFibNum1;
        previousFibNum1 = currentFibNum;
        currentFibNum = previousFibNum2 + previousFibNum1;
    }
    cout << fibNumSum << "\n";
}

3) Largest Prime Factor
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;
int main(){
    long long int number = 600851475143LL;
    long long int highestPrimeFactor = 0LL;
    long long int currentFactor = 2LL;
    while (number > highestPrimeFactor){
        if (
            (number % currentFactor == 0) && 
            (currentFactor > highestPrimeFactor)
        ){
            highestPrimeFactor = currentFactor;
            number /= currentFactor;
        }
        else{
            ++currentFactor;   
        }
    }
    
    cout << highestPrimeFactor << "\n";
}

4) Largest Palindrome Product
#include <iostream>
#include <string>
using namespace std;
int main(){
    int largestPalindromeProduct = 0;
    for (int i = 100; i < 1000; ++i){
        for (int j = 100; j < 1000; ++j){
            int currentProduct = i * j;
            string currentProductString = to_string(currentProduct);
            if (
                (currentProductString == std::string{ currentProductString.rbegin(), currentProductString.rend() }) &&
                (currentProduct > largestPalindromeProduct)
            )            {
                largestPalindromeProduct = currentProduct;
            }
        }
    }
    cout << largestPalindromeProduct << "\n";
}

5) Smallest Multiple
#include <iostream>
using namespace std;
int main() {
    long long num = 20; 
    while (true) {
        bool divisible = true;
        for (int i = 1; i <= 20; i++) {
            if (num % i != 0) {
                divisible = false;
                break;
            }
        }
        if (divisible) {
            cout << "The smallest number divisible by 1 to 20 is: " << num << endl;
            break;
        }
        num++;
    }
    return 0;
}

6) Sum Square Difference
#include <iostream>
using namespace std;
int main(){
    long long int sumOfSquares = 0LL;
    long int squareOfSum = 0LL;
    for (int number = 1; number <= 100; ++number)    {
        sumOfSquares += (number * number); 
        squareOfSum += number;
    }
    squareOfSum *= squareOfSum;
    cout << (squareOfSum - sumOfSquares) << "\n";
}

7) The 10,001st Prime
#include <iostream>
using namespace std;
bool isPrime(long long num) {
    if (num < 2)
        return false;
    for (long long i = 2; i * i <= num; i++) {
        if (num % i == 0)
            return false;
    }
    return true;
}
int main() {
    int count = 0;
    long long num = 1;
    while (count < 10001) {
        num++;
        if (isPrime(num)) {
            count++;
        }
    }
    cout << "The 10001st prime number is: " << num << endl;
    return 0;
}


8) The largest product in a series
#include <iostream>
#include <string>
using namespace std;
int main(){
    const string numberString = "73167176531330624919225119674426574742355349194934"
        "96983520312774506326239578318016984801869478851843"
        "85861560789112949495459501737958331952853208805511"
        "12540698747158523863050715693290963295227443043557"
        "66896648950445244523161731856403098711121722383113"
        "62229893423380308135336276614282806444486645238749"
        "30358907296290491560440772390713810515859307960866"
        "70172427121883998797908792274921901699720888093776"
        "65727333001053367881220235421809751254540594752243"
        "52584907711670556013604839586446706324415722155397"
        "53697817977846174064955149290862569321978468622482"
        "83972241375657056057490261407972968652414535100474"
        "82166370484403199890008895243450658541227588666881"
        "16427171479924442928230863465674813919123162824586"
        "17866458359124566529476545682848912883142607690042"
        "24219022671055626321111109370544217506941658960408"
        "07198403850962455444362981230987879927244284909188"
        "84580156166097919133875499200524063689912560717606"
        "05886116467109405077541002256983155200055935729725"
        "71636269561882670428252483600823257530420752963450";
    long long int greatestProduct = 1;
    for (size_t i = 0; i < numberString.length() - 13; ++i){
        long long int currentProduct = 1;
        for (size_t j = i; j < i + 13; ++j){
            currentProduct *= numberString[j] - '0';
        }
        if (currentProduct > greatestProduct){
            greatestProduct = currentProduct;
        }
    }
    cout << greatestProduct << "\n";
}

9)special Pythagorean triplet
#include <iostream>
using namespace std;
int main()
{
    for (int a = 1; a < 1000; ++a){
        for (int b = 1; b < 1000; ++b){
            for (int c = 1; c < 1000; ++c){
                if (a * a + b * b == c * c && a + b + c == 1000){
                    cout << a * b * c << "\n";
                    return 0;
                }
            }
        }
    }
}
